
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Lua 模組設定
    lua_shared_dict redis_connection_pool 1m;
    lua_socket_connect_timeout 100ms;
    lua_socket_send_timeout 100ms;
    lua_socket_read_timeout 100ms;
    lua_socket_pool_size 100;

    # Redis 初始化
    init_by_lua_block {
        redis = require "resty.redis"
        jwt = require "resty.jwt"
    	validators = require "resty.jwt-validators"
    	jwt_secret = ngx.decode_base64("bXlfc3VwZXJfc2VjcmV0X2tleV9mb3JfdGlja2V0X3N5c3RlbQ==")
        
    }

    log_format simple '$remote_addr [$time_local] "$request" $status $body_bytes_sent';

    access_log /var/log/nginx/access.log simple;
    error_log /var/log/nginx/error.log warn;

    resolver 127.0.0.11 ipv6=off;

    include /etc/nginx/conf.d/http/cache.conf;
    include /etc/nginx/conf.d/http/limit.conf;

    server {
        listen 80;
        # 在每個請求前檢查用戶是否被封鎖



access_by_lua_block {
    local auth_header = ngx.req.get_headers()["Authorization"]
    
    if not auth_header then
        ngx.log(ngx.ERR, "No Authorization header")
        return
    end

    local _, _, token = string.find(auth_header, "Bearer%s+(.+)")
    if not token then
        ngx.log(ngx.ERR, "No token found")
        return
    end

    -- 使用正確的驗證選項格式
    local claim_spec = {
        exp = validators.is_not_expired(),
        nbf = validators.is_not_before()
    }

     -- 簡化的驗證
    local jwt_obj = jwt:verify(jwt_secret, token)
    
    if not jwt_obj.verified then
        ngx.log(ngx.ERR, "JWT verification failed: ", jwt_obj.reason)
        return
    end

    -- 從 JWT payload 取得用戶名
    local user_name = jwt_obj.payload.sub
    ngx.log(ngx.ERR, "Username from token: ", user_name)

    -- Redis 黑名單檢查
    local red = redis:new()
    local ok, err = red:connect("redis", 6379)
    if not ok then
        ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
        return
    end

    local is_blocked, err = red:sismember("blocked_users", user_name)
    if err then
        ngx.log(ngx.ERR, "Redis error: ", err)
        return
    end

    if is_blocked == 1 then
	    ngx.status = 403
	    ngx.header["Access-Control-Allow-Origin"] = "*"  -- 處理 CORS 
	    ngx.header.content_type = "application/json"
	    ngx.say(string.format([[
	        {
	            "error": "Forbidden",
	            "message": "您的帳號已被封鎖",
	            "statusCode": 999,
	            "redirectUrl": "/blocked-page"
	        }
	    ]]))
	    ngx.exit(ngx.HTTP_FORBIDDEN)
	end

    local ok, err = red:set_keepalive(10000, 100)
    if not ok then
        ngx.log(ngx.ERR, "Failed to set keepalive: ", err)
    end
}

        # 管理封鎖的 API
        location /admin/block-user {
            internal;
            content_by_lua_block {
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if not data then
                    ngx.status = 400
                    ngx.say('{"error": "Bad Request"}')
                    return
                end

                local cjson = require "cjson"
                local req = cjson.decode(data)

                local red = redis:new()
                red:set_timeout(1000)
                local ok, err = red:connect("redis", 6379)
                if not ok then
                    ngx.status = 500
                    ngx.say('{"error": "Internal Server Error"}')
                    return
                end

                if req.action == "block" then
                    red:sadd("blocked_users", req.user_id)
                elseif req.action == "unblock" then
                    red:srem("blocked_users", req.user_id)
                end

                ngx.say('{"status": "success"}')
                red:set_keepalive(10000, 100)
            }
        }

        include /etc/nginx/conf.d/server/server_cors.conf;
        include /etc/nginx/conf.d/server/locations/server_locations.conf;
      #include /etc/nginx/conf.d/server/locations/cached_locations.conf;
        include /etc/nginx/conf.d/server/locations/websocket.conf;
    }
}